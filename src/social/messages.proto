//
// Protocol messages for constructing paths over the social
// network
//

package UniSphere.Protocol;

import "src/social/address.proto";

message SecurityAssociationCreate {
  // Public key for this SA
  required bytes public_key = 1;
  // Expiry (in seconds from creation)
  required uint32 expiry = 2;
}

message SecurityAssociationInvalid {
  // Invalid SA public key
  required bytes public_key = 1;
}

message PathDelegation {
  // Public SA key to delegate announce privilege to
  required bytes delegation = 1;
  // Signature of <forward_vport, reverse_vport, delegation>
  required bytes signature = 2;
}

// TODO: Cryptographic signing
// TODO: Timestamp to avoid replay attacks
// TODO: Missing optional cost field
message PathAnnounce {
  // Originator public key
  required bytes public_key = 1;
  // Forward path
  repeated uint32 forward_path = 2;
  // Reverse path (included only for landmark announces)
  repeated uint32 reverse_path = 3;
  // Landmark status of the origin
  required bool landmark = 4;
  // Sequence number
  required uint32 seqno = 5;
  // Cryptographic path delegation chain
  repeated PathDelegation delegation_chain = 6;
}

message AggregatePathAnnounce {
  // Aggregated path announcements
  repeated PathAnnounce announces = 1;
}

// TODO: Retraction should be done as an announce with all fields but destination missing
message PathRetract {
  // Destination identifier
  required bytes destination_id = 1;
}

message PathRefresh {
  // Destination identifier
  required bytes destination_id = 1;
}

message RoutedMessage {
  // Source landmark
  required bytes source_landmark = 1;
  // Source node landmark-relative address
  repeated uint32 source_address = 2;
  // Source node identifier
  required bytes source_node = 3;
  // Source component identifier
  required uint32 source_comp = 4;

  // Destination landmark
  optional bytes destination_landmark = 5;
  // Destination node landmark-relative address
  repeated uint32 destination_address = 6;
  // Destination node identifier
  required bytes destination_node = 7;
  // Destination component identifier
  required uint32 destination_comp = 8;

  // Hop limit
  required uint32 hop_limit = 9;
  // Delivery mode flag
  required bool delivery = 10;

  // Message type (component dependent)
  required uint32 type = 11;
  // Message payload (type dependent)
  required bytes payload = 12;

  // Hop distance (incremented for each hop)
  // TODO: In reality this should be a cryptographic signature chain with delegations
  optional uint32 hop_distance = 13;
}

// TODO: Rename to LocationAnnounce?
// TODO: Cryptographic signing
message NameAnnounce {
  // Originator node identifier
  required bytes origin_id = 1;
  // Originator-local timestamp
  required uint32 timestamp = 2;
  // Sequence number
  required uint32 seqno = 3;
  // List of landmark addresses to announce
  repeated LandmarkAddress addresses = 4;
}

// TODO: Rename to AggregateLocationAnnounce?
message AggregateNameAnnounce {
  // Aggregated name announcements
  repeated NameAnnounce announces = 1;
}
