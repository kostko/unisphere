//
// Protocol messages for constructing paths over the social
// network
//

package UniSphere.Protocol;

import "src/social/address.proto";

// TODO: Cryptographic signing
// TODO: Timestamp to avoid replay attacks
// TODO: Missing optional cost field
// TODO: Change from camel-case to underscore-case
message PathAnnounce {
  // Destination identifier
  required bytes destinationId = 1;
  // Forward path
  repeated uint32 forwardPath = 2;
  // Reverse path (included only for landmark announces)
  repeated uint32 reversePath = 3;
  // Landmark status of the origin
  required bool landmark = 4;
  // Sequence number
  required uint32 seqno = 5;
}

message AggregatePathAnnounce {
  // Aggregated path announcements
  repeated PathAnnounce announces = 1;
}

// TODO: Retraction should be done as an announce with all fields but destination missing
message PathRetract {
  // Destination identifier
  required bytes destinationId = 1;
}

// TODO: Change from camel-case to underscore-case
message PathRefresh {
  // Destination identifier
  required bytes destinationId = 1;
}

// TODO: Change from camel-case to underscore-case
message RoutedMessage {
  // Source landmark
  required bytes sourceLandmark = 1;
  // Source node landmark-relative address
  repeated uint32 sourceAddress = 2;
  // Source node identifier
  required bytes sourceNode = 3;
  // Source component identifier
  required uint32 sourceComp = 4;
  
  // Destination landmark
  optional bytes destinationLandmark = 5;
  // Destination node landmark-relative address
  repeated uint32 destinationAddress = 6;
  // Destination node identifier
  required bytes destinationNode = 7;
  // Destination component identifier
  required uint32 destinationComp = 8;
  
  // Hop count
  required uint32 hopCount = 9;
  // Delivery mode flag
  required bool delivery = 10;
  
  // Message type (component dependent)
  required uint32 type = 11;
  // Message payload (type dependent)
  required bytes payload = 12;
}

// TODO: Rename to LocationAnnounce?
// TODO: Cryptographic signing
message NameAnnounce {
  // Originator node identifier
  required bytes origin_id = 1;
  // Originator-local timestamp
  required uint32 timestamp = 2;
  // Sequence number
  required uint32 seqno = 3;
  // List of landmark addresses to announce
  repeated LandmarkAddress addresses = 4;
}

// TODO: Rename to AggregateLocationAnnounce?
message AggregateNameAnnounce {
  // Aggregated name announcements
  repeated NameAnnounce announces = 1;
}
